--- src/rdb_protocol/datum.cc	2020-08-13 05:23:26.000000000 +0000
+++ src/rdb_protocol/datum_endian_fix.cc	2021-12-22 05:23:21.636561200 +0000
@@ -12,7 +12,7 @@
 #include <iterator>
 
 #include "errors.hpp"
-#include <boost/detail/endian.hpp>
+#include <boost/predef/other/endian.h>
 
 #include "arch/runtime/coroutines.hpp"
 #include "cjson/json.hpp"
@@ -1122,7 +1122,7 @@
             "tag_size constant is assumed to be the size of a uint64_t.");
 #if defined(__s390x__)
     tag_num = __builtin_bswap64(tag_num);
-#elif !defined(BOOST_LITTLE_ENDIAN)
+#elif !defined(BOOST_ENDIAN_LITTLE_BYTE)
     static_assert(false, "This piece of code will break on big-endian systems.");
 #endif
     return std::string(reinterpret_cast<const char *>(&tag_num), tag_size);
@@ -1251,7 +1251,7 @@
         uint64_t t = *reinterpret_cast<const uint64_t *>(tag_str.data());
 #if defined(__s390x__)
         t = __builtin_bswap64(t);
-#elif !defined(BOOST_LITTLE_ENDIAN)
+#elif !defined(BOOST_ENDIAN_LITTLE_BYTE)
         static_assert(false, "This piece of code will break on big endian systems.");
 #endif
         tag_num.set(t);
