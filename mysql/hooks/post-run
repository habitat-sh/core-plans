#!{{pkgPathFor "core/bash"}}/bin/bash -e

{{#if svc.me.follower ~}}
# MySQL follower (aka "slave" in MySQL parlance) setup
REMOTE_CONNECT_STRING="-h {{svc.leader.sys.ip}} -u root -p{{cfg.root_password}}"
LOCAL_CONNECT_STRING="--defaults-extra-file={{pkg.svc_config_path}}/client.cnf"

# Wait for both the remote and local mysql instances to be ready
mysqladmin $REMOTE_CONNECT_STRING --wait=5 ping
mysqladmin $LOCAL_CONNECT_STRING --wait=5 ping

# Grab the binlog file and position, needed for replication
master_status=`mysql $REMOTE_CONNECT_STRING mysql -e "SHOW MASTER STATUS" |grep mysql-bin`
master_status_file=`echo $master_status | cut -d " " -f 1`
master_status_position=`echo $master_status | cut -d " " -f 2`

# Now dump the data
echo "Performing mysqldump of all databases from leader {{svc.leader.sys.ip}}"
mysqldump $REMOTE_CONNECT_STRING \
  --single-transaction \
  --order-by-primary \
  --compress \
  --quick \
  --extended-insert \
  --all-databases | mysql $LOCAL_CONNECT_STRING

# What do all these mysqldump flags mean?
# from: http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html
# --single-transaction  - runs the entire dump as a single consistent snapshot.  Prevents all locks from happening in InnoDB tables (NOTE: this is very important to prevent website outages)
# --order-by-primary - Dump each table's rows sorted by its primary key, or by its first unique index
# --compress - compresses data over the wire, to speed transfers from the source
# --quick - Grabs a row at a time rather than buffering the whole table into RAM.  Prevents failures for very large tables
# --extended-insert - Write INSERT statements using multiple-row syntax that includes several VALUES lists. This results in a smaller dump file and speeds up inserts when the file is reloaded.

echo "Configuring local mysql instance as a follower"
mysql $LOCAL_CONNECT_STRING -e "CHANGE MASTER TO MASTER_HOST='{{svc.leader.sys.ip}}', MASTER_USER='root', MASTER_PASSWORD='{{cfg.root_password}}', MASTER_LOG_FILE='${master_status_file}', MASTER_LOG_POS=${master_status_position}"
mysql $LOCAL_CONNECT_STRING -e "START SLAVE"
mysql $LOCAL_CONNECT_STRING -e "SHOW SLAVE STATUS"
echo "Success"

{{else}}
# MySQL leader
exit 0
{{~/if}}
